
[tkim058]_lab[10]_part[3].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000005b8  0000064c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800104  00800104  00000650  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000110a  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fc  00000000  00000000  0000187a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000758  00000000  00000000  00002276  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  000029d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fa  00000000  00000000  00002b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000648  00000000  00000000  00003166  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000037ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	67 c0       	rjmp	.+206    	; 0xd0 <__ctors_end>
   2:	00 00       	nop
   4:	82 c0       	rjmp	.+260    	; 0x10a <__bad_interrupt>
   6:	00 00       	nop
   8:	80 c0       	rjmp	.+256    	; 0x10a <__bad_interrupt>
   a:	00 00       	nop
   c:	7e c0       	rjmp	.+252    	; 0x10a <__bad_interrupt>
   e:	00 00       	nop
  10:	7c c0       	rjmp	.+248    	; 0x10a <__bad_interrupt>
  12:	00 00       	nop
  14:	7a c0       	rjmp	.+244    	; 0x10a <__bad_interrupt>
  16:	00 00       	nop
  18:	78 c0       	rjmp	.+240    	; 0x10a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	76 c0       	rjmp	.+236    	; 0x10a <__bad_interrupt>
  1e:	00 00       	nop
  20:	74 c0       	rjmp	.+232    	; 0x10a <__bad_interrupt>
  22:	00 00       	nop
  24:	72 c0       	rjmp	.+228    	; 0x10a <__bad_interrupt>
  26:	00 00       	nop
  28:	70 c0       	rjmp	.+224    	; 0x10a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6e c0       	rjmp	.+220    	; 0x10a <__bad_interrupt>
  2e:	00 00       	nop
  30:	6c c0       	rjmp	.+216    	; 0x10a <__bad_interrupt>
  32:	00 00       	nop
  34:	3c c1       	rjmp	.+632    	; 0x2ae <__vector_13>
  36:	00 00       	nop
  38:	68 c0       	rjmp	.+208    	; 0x10a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	66 c0       	rjmp	.+204    	; 0x10a <__bad_interrupt>
  3e:	00 00       	nop
  40:	64 c0       	rjmp	.+200    	; 0x10a <__bad_interrupt>
  42:	00 00       	nop
  44:	62 c0       	rjmp	.+196    	; 0x10a <__bad_interrupt>
  46:	00 00       	nop
  48:	60 c0       	rjmp	.+192    	; 0x10a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5e c0       	rjmp	.+188    	; 0x10a <__bad_interrupt>
  4e:	00 00       	nop
  50:	5c c0       	rjmp	.+184    	; 0x10a <__bad_interrupt>
  52:	00 00       	nop
  54:	5a c0       	rjmp	.+180    	; 0x10a <__bad_interrupt>
  56:	00 00       	nop
  58:	58 c0       	rjmp	.+176    	; 0x10a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	56 c0       	rjmp	.+172    	; 0x10a <__bad_interrupt>
  5e:	00 00       	nop
  60:	54 c0       	rjmp	.+168    	; 0x10a <__bad_interrupt>
  62:	00 00       	nop
  64:	52 c0       	rjmp	.+164    	; 0x10a <__bad_interrupt>
  66:	00 00       	nop
  68:	50 c0       	rjmp	.+160    	; 0x10a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4e c0       	rjmp	.+156    	; 0x10a <__bad_interrupt>
  6e:	00 00       	nop
  70:	4c c0       	rjmp	.+152    	; 0x10a <__bad_interrupt>
  72:	00 00       	nop
  74:	4a c0       	rjmp	.+148    	; 0x10a <__bad_interrupt>
  76:	00 00       	nop
  78:	48 c0       	rjmp	.+144    	; 0x10a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	46 c0       	rjmp	.+140    	; 0x10a <__bad_interrupt>
  7e:	00 00       	nop
  80:	44 c0       	rjmp	.+136    	; 0x10a <__bad_interrupt>
  82:	00 00       	nop
  84:	42 c0       	rjmp	.+132    	; 0x10a <__bad_interrupt>
  86:	00 00       	nop
  88:	40 c0       	rjmp	.+128    	; 0x10a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2c 01       	movw	r4, r24
  8e:	30 01       	movw	r6, r0
  90:	30 01       	movw	r6, r0
  92:	30 01       	movw	r6, r0
  94:	30 01       	movw	r6, r0
  96:	30 01       	movw	r6, r0
  98:	30 01       	movw	r6, r0
  9a:	22 01       	movw	r4, r4
  9c:	30 01       	movw	r6, r0
  9e:	30 01       	movw	r6, r0
  a0:	30 01       	movw	r6, r0
  a2:	30 01       	movw	r6, r0
  a4:	30 01       	movw	r6, r0
  a6:	27 01       	movw	r4, r14
  a8:	e1 00       	.word	0x00e1	; ????
  aa:	e6 00       	.word	0x00e6	; ????
  ac:	eb 00       	.word	0x00eb	; ????
  ae:	f0 00       	.word	0x00f0	; ????
  b0:	f5 00       	.word	0x00f5	; ????
  b2:	fa 00       	.word	0x00fa	; ????
  b4:	ff 00       	.word	0x00ff	; ????
  b6:	04 01       	movw	r0, r8
  b8:	09 01       	movw	r0, r18
  ba:	30 01       	movw	r6, r0
  bc:	30 01       	movw	r6, r0
  be:	30 01       	movw	r6, r0
  c0:	30 01       	movw	r6, r0
  c2:	30 01       	movw	r6, r0
  c4:	30 01       	movw	r6, r0
  c6:	30 01       	movw	r6, r0
  c8:	0e 01       	movw	r0, r28
  ca:	13 01       	movw	r2, r6
  cc:	18 01       	movw	r2, r16
  ce:	1d 01       	movw	r2, r26

000000d0 <__ctors_end>:
  d0:	11 24       	eor	r1, r1
  d2:	1f be       	out	0x3f, r1	; 63
  d4:	cf ef       	ldi	r28, 0xFF	; 255
  d6:	d0 e4       	ldi	r29, 0x40	; 64
  d8:	de bf       	out	0x3e, r29	; 62
  da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
  dc:	11 e0       	ldi	r17, 0x01	; 1
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	e8 eb       	ldi	r30, 0xB8	; 184
  e4:	f5 e0       	ldi	r31, 0x05	; 5
  e6:	00 e0       	ldi	r16, 0x00	; 0
  e8:	0b bf       	out	0x3b, r16	; 59
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
  ec:	07 90       	elpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	a4 30       	cpi	r26, 0x04	; 4
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	a4 e0       	ldi	r26, 0x04	; 4
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a0 32       	cpi	r26, 0x20	; 32
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	73 d1       	rcall	.+742    	; 0x3ee <main>
 108:	55 c2       	rjmp	.+1194   	; 0x5b4 <_exit>

0000010a <__bad_interrupt>:
 10a:	7a cf       	rjmp	.-268    	; 0x0 <__vectors>

0000010c <delay_ms>:
		if (c==0){ return b;}
		a = b;
		b = c;
	}
	return 0;
}
 10c:	18 16       	cp	r1, r24
 10e:	19 06       	cpc	r1, r25
 110:	5c f0       	brlt	.+22     	; 0x128 <delay_ms+0x1c>
 112:	08 95       	ret
 114:	00 00       	nop
 116:	21 50       	subi	r18, 0x01	; 1
 118:	31 09       	sbc	r19, r1
 11a:	e1 f7       	brne	.-8      	; 0x114 <delay_ms+0x8>
 11c:	4f 5f       	subi	r20, 0xFF	; 255
 11e:	5f 4f       	sbci	r21, 0xFF	; 255
 120:	84 17       	cp	r24, r20
 122:	95 07       	cpc	r25, r21
 124:	19 f4       	brne	.+6      	; 0x12c <delay_ms+0x20>
 126:	08 95       	ret
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	27 e0       	ldi	r18, 0x07	; 7
 12e:	33 e0       	ldi	r19, 0x03	; 3
 130:	f1 cf       	rjmp	.-30     	; 0x114 <delay_ms+0x8>

00000132 <LCD_WriteCommand>:
 132:	5e 98       	cbi	0x0b, 6	; 11
 134:	88 b9       	out	0x08, r24	; 8
 136:	5f 9a       	sbi	0x0b, 7	; 11
 138:	00 00       	nop
 13a:	5f 98       	cbi	0x0b, 7	; 11
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	e5 cf       	rjmp	.-54     	; 0x10c <delay_ms>
 142:	08 95       	ret

00000144 <LCD_Cursor>:
 144:	81 31       	cpi	r24, 0x11	; 17
 146:	18 f4       	brcc	.+6      	; 0x14e <LCD_Cursor+0xa>
 148:	81 58       	subi	r24, 0x81	; 129
 14a:	f3 cf       	rjmp	.-26     	; 0x132 <LCD_WriteCommand>
 14c:	08 95       	ret
 14e:	81 55       	subi	r24, 0x51	; 81
 150:	f0 cf       	rjmp	.-32     	; 0x132 <LCD_WriteCommand>
 152:	08 95       	ret

00000154 <LCD_init>:
 154:	84 e6       	ldi	r24, 0x64	; 100
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	d9 df       	rcall	.-78     	; 0x10c <delay_ms>
 15a:	88 e3       	ldi	r24, 0x38	; 56
 15c:	ea df       	rcall	.-44     	; 0x132 <LCD_WriteCommand>
 15e:	86 e0       	ldi	r24, 0x06	; 6
 160:	e8 df       	rcall	.-48     	; 0x132 <LCD_WriteCommand>
 162:	8f e0       	ldi	r24, 0x0F	; 15
 164:	e6 df       	rcall	.-52     	; 0x132 <LCD_WriteCommand>
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	e4 df       	rcall	.-56     	; 0x132 <LCD_WriteCommand>
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	ce cf       	rjmp	.-100    	; 0x10c <delay_ms>
 170:	08 95       	ret

00000172 <LCD_WriteData>:
 172:	5e 9a       	sbi	0x0b, 6	; 11
 174:	88 b9       	out	0x08, r24	; 8
 176:	5f 9a       	sbi	0x0b, 7	; 11
 178:	00 00       	nop
 17a:	5f 98       	cbi	0x0b, 7	; 11
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	c5 cf       	rjmp	.-118    	; 0x10c <delay_ms>
 182:	08 95       	ret

00000184 <SMTick2>:
 184:	89 2b       	or	r24, r25
 186:	09 f0       	breq	.+2      	; 0x18a <SMTick2+0x6>
 188:	6b c0       	rjmp	.+214    	; 0x260 <SMTick2+0xdc>
 18a:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <x>
 18e:	8f eb       	ldi	r24, 0xBF	; 191
 190:	8e 0f       	add	r24, r30
 192:	84 30       	cpi	r24, 0x04	; 4
 194:	58 f0       	brcs	.+22     	; 0x1ac <SMTick2+0x28>
 196:	ea 32       	cpi	r30, 0x2A	; 42
 198:	09 f4       	brne	.+2      	; 0x19c <SMTick2+0x18>
 19a:	54 c0       	rjmp	.+168    	; 0x244 <SMTick2+0xc0>
 19c:	80 ed       	ldi	r24, 0xD0	; 208
 19e:	8e 0f       	add	r24, r30
 1a0:	8a 30       	cpi	r24, 0x0A	; 10
 1a2:	20 f0       	brcs	.+8      	; 0x1ac <SMTick2+0x28>
 1a4:	e3 32       	cpi	r30, 0x23	; 35
 1a6:	09 f0       	breq	.+2      	; 0x1aa <SMTick2+0x26>
 1a8:	5b c0       	rjmp	.+182    	; 0x260 <SMTick2+0xdc>
 1aa:	56 c0       	rjmp	.+172    	; 0x258 <SMTick2+0xd4>
 1ac:	8e 2f       	mov	r24, r30
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	fc 01       	movw	r30, r24
 1b2:	b3 97       	sbiw	r30, 0x23	; 35
 1b4:	e2 32       	cpi	r30, 0x22	; 34
 1b6:	f1 05       	cpc	r31, r1
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <SMTick2+0x38>
 1ba:	52 c0       	rjmp	.+164    	; 0x260 <SMTick2+0xdc>
 1bc:	ea 5b       	subi	r30, 0xBA	; 186
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	f0 c1       	rjmp	.+992    	; 0x5a2 <__tablejump2__>
 1c2:	81 e3       	ldi	r24, 0x31	; 49
 1c4:	d6 df       	rcall	.-84     	; 0x172 <LCD_WriteData>
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	bd df       	rcall	.-134    	; 0x144 <LCD_Cursor>
 1ca:	4a c0       	rjmp	.+148    	; 0x260 <SMTick2+0xdc>
 1cc:	82 e3       	ldi	r24, 0x32	; 50
 1ce:	d1 df       	rcall	.-94     	; 0x172 <LCD_WriteData>
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	b8 df       	rcall	.-144    	; 0x144 <LCD_Cursor>
 1d4:	45 c0       	rjmp	.+138    	; 0x260 <SMTick2+0xdc>
 1d6:	83 e3       	ldi	r24, 0x33	; 51
 1d8:	cc df       	rcall	.-104    	; 0x172 <LCD_WriteData>
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	b3 df       	rcall	.-154    	; 0x144 <LCD_Cursor>
 1de:	40 c0       	rjmp	.+128    	; 0x260 <SMTick2+0xdc>
 1e0:	84 e3       	ldi	r24, 0x34	; 52
 1e2:	c7 df       	rcall	.-114    	; 0x172 <LCD_WriteData>
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	ae df       	rcall	.-164    	; 0x144 <LCD_Cursor>
 1e8:	3b c0       	rjmp	.+118    	; 0x260 <SMTick2+0xdc>
 1ea:	85 e3       	ldi	r24, 0x35	; 53
 1ec:	c2 df       	rcall	.-124    	; 0x172 <LCD_WriteData>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	a9 df       	rcall	.-174    	; 0x144 <LCD_Cursor>
 1f2:	36 c0       	rjmp	.+108    	; 0x260 <SMTick2+0xdc>
 1f4:	86 e3       	ldi	r24, 0x36	; 54
 1f6:	bd df       	rcall	.-134    	; 0x172 <LCD_WriteData>
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	a4 df       	rcall	.-184    	; 0x144 <LCD_Cursor>
 1fc:	31 c0       	rjmp	.+98     	; 0x260 <SMTick2+0xdc>
 1fe:	87 e3       	ldi	r24, 0x37	; 55
 200:	b8 df       	rcall	.-144    	; 0x172 <LCD_WriteData>
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	9f df       	rcall	.-194    	; 0x144 <LCD_Cursor>
 206:	2c c0       	rjmp	.+88     	; 0x260 <SMTick2+0xdc>
 208:	88 e3       	ldi	r24, 0x38	; 56
 20a:	b3 df       	rcall	.-154    	; 0x172 <LCD_WriteData>
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	9a df       	rcall	.-204    	; 0x144 <LCD_Cursor>
 210:	27 c0       	rjmp	.+78     	; 0x260 <SMTick2+0xdc>
 212:	89 e3       	ldi	r24, 0x39	; 57
 214:	ae df       	rcall	.-164    	; 0x172 <LCD_WriteData>
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	95 df       	rcall	.-214    	; 0x144 <LCD_Cursor>
 21a:	22 c0       	rjmp	.+68     	; 0x260 <SMTick2+0xdc>
 21c:	81 e4       	ldi	r24, 0x41	; 65
 21e:	a9 df       	rcall	.-174    	; 0x172 <LCD_WriteData>
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 df       	rcall	.-224    	; 0x144 <LCD_Cursor>
 224:	1d c0       	rjmp	.+58     	; 0x260 <SMTick2+0xdc>
 226:	82 e4       	ldi	r24, 0x42	; 66
 228:	a4 df       	rcall	.-184    	; 0x172 <LCD_WriteData>
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	8b df       	rcall	.-234    	; 0x144 <LCD_Cursor>
 22e:	18 c0       	rjmp	.+48     	; 0x260 <SMTick2+0xdc>
 230:	83 e4       	ldi	r24, 0x43	; 67
 232:	9f df       	rcall	.-194    	; 0x172 <LCD_WriteData>
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	86 df       	rcall	.-244    	; 0x144 <LCD_Cursor>
 238:	13 c0       	rjmp	.+38     	; 0x260 <SMTick2+0xdc>
 23a:	84 e4       	ldi	r24, 0x44	; 68
 23c:	9a df       	rcall	.-204    	; 0x172 <LCD_WriteData>
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	81 df       	rcall	.-254    	; 0x144 <LCD_Cursor>
 242:	0e c0       	rjmp	.+28     	; 0x260 <SMTick2+0xdc>
 244:	8a e2       	ldi	r24, 0x2A	; 42
 246:	95 df       	rcall	.-214    	; 0x172 <LCD_WriteData>
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	7c df       	rcall	.-264    	; 0x144 <LCD_Cursor>
 24c:	09 c0       	rjmp	.+18     	; 0x260 <SMTick2+0xdc>
 24e:	80 e3       	ldi	r24, 0x30	; 48
 250:	90 df       	rcall	.-224    	; 0x172 <LCD_WriteData>
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	77 df       	rcall	.-274    	; 0x144 <LCD_Cursor>
 256:	04 c0       	rjmp	.+8      	; 0x260 <SMTick2+0xdc>
 258:	83 e2       	ldi	r24, 0x23	; 35
 25a:	8b df       	rcall	.-234    	; 0x172 <LCD_WriteData>
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	72 df       	rcall	.-284    	; 0x144 <LCD_Cursor>
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	08 95       	ret

00000266 <TimerOn>:
 266:	8b e0       	ldi	r24, 0x0B	; 11
 268:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 26c:	8d e7       	ldi	r24, 0x7D	; 125
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 274:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 27e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 282:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 286:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 28a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 28e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 292:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 296:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_avr_timer_cntcurr>
 29a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <_avr_timer_cntcurr+0x1>
 29e:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <_avr_timer_cntcurr+0x2>
 2a2:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <_avr_timer_cntcurr+0x3>
 2a6:	8f b7       	in	r24, 0x3f	; 63
 2a8:	80 68       	ori	r24, 0x80	; 128
 2aa:	8f bf       	out	0x3f, r24	; 63
 2ac:	08 95       	ret

000002ae <__vector_13>:
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_avr_timer_cntcurr>
 2c4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <_avr_timer_cntcurr+0x1>
 2c8:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <_avr_timer_cntcurr+0x2>
 2cc:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <_avr_timer_cntcurr+0x3>
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	a1 09       	sbc	r26, r1
 2d4:	b1 09       	sbc	r27, r1
 2d6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_avr_timer_cntcurr>
 2da:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <_avr_timer_cntcurr+0x1>
 2de:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <_avr_timer_cntcurr+0x2>
 2e2:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <_avr_timer_cntcurr+0x3>
 2e6:	89 2b       	or	r24, r25
 2e8:	8a 2b       	or	r24, r26
 2ea:	8b 2b       	or	r24, r27
 2ec:	99 f4       	brne	.+38     	; 0x314 <__vector_13+0x66>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <TimerFlag>
 2f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2fc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 300:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 304:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_avr_timer_cntcurr>
 308:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <_avr_timer_cntcurr+0x1>
 30c:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <_avr_timer_cntcurr+0x2>
 310:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <_avr_timer_cntcurr+0x3>
 314:	bf 91       	pop	r27
 316:	af 91       	pop	r26
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <TimerSet>:
 326:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 32a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 32e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 332:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 336:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <_avr_timer_cntcurr>
 33a:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <_avr_timer_cntcurr+0x1>
 33e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_avr_timer_cntcurr+0x2>
 342:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <_avr_timer_cntcurr+0x3>
 346:	08 95       	ret

00000348 <GetKeypadKey>:
 348:	8f ee       	ldi	r24, 0xEF	; 239
 34a:	88 b9       	out	0x08, r24	; 8
 34c:	00 00       	nop
 34e:	30 9b       	sbis	0x06, 0	; 6
 350:	29 c0       	rjmp	.+82     	; 0x3a4 <GetKeypadKey+0x5c>
 352:	31 9b       	sbis	0x06, 1	; 6
 354:	29 c0       	rjmp	.+82     	; 0x3a8 <GetKeypadKey+0x60>
 356:	32 9b       	sbis	0x06, 2	; 6
 358:	29 c0       	rjmp	.+82     	; 0x3ac <GetKeypadKey+0x64>
 35a:	33 9b       	sbis	0x06, 3	; 6
 35c:	29 c0       	rjmp	.+82     	; 0x3b0 <GetKeypadKey+0x68>
 35e:	8f ed       	ldi	r24, 0xDF	; 223
 360:	88 b9       	out	0x08, r24	; 8
 362:	00 00       	nop
 364:	30 9b       	sbis	0x06, 0	; 6
 366:	26 c0       	rjmp	.+76     	; 0x3b4 <GetKeypadKey+0x6c>
 368:	31 9b       	sbis	0x06, 1	; 6
 36a:	26 c0       	rjmp	.+76     	; 0x3b8 <GetKeypadKey+0x70>
 36c:	32 9b       	sbis	0x06, 2	; 6
 36e:	26 c0       	rjmp	.+76     	; 0x3bc <GetKeypadKey+0x74>
 370:	33 9b       	sbis	0x06, 3	; 6
 372:	26 c0       	rjmp	.+76     	; 0x3c0 <GetKeypadKey+0x78>
 374:	8f eb       	ldi	r24, 0xBF	; 191
 376:	88 b9       	out	0x08, r24	; 8
 378:	00 00       	nop
 37a:	30 9b       	sbis	0x06, 0	; 6
 37c:	23 c0       	rjmp	.+70     	; 0x3c4 <GetKeypadKey+0x7c>
 37e:	31 9b       	sbis	0x06, 1	; 6
 380:	23 c0       	rjmp	.+70     	; 0x3c8 <GetKeypadKey+0x80>
 382:	32 9b       	sbis	0x06, 2	; 6
 384:	23 c0       	rjmp	.+70     	; 0x3cc <GetKeypadKey+0x84>
 386:	33 9b       	sbis	0x06, 3	; 6
 388:	23 c0       	rjmp	.+70     	; 0x3d0 <GetKeypadKey+0x88>
 38a:	8f e7       	ldi	r24, 0x7F	; 127
 38c:	88 b9       	out	0x08, r24	; 8
 38e:	00 00       	nop
 390:	30 9b       	sbis	0x06, 0	; 6
 392:	20 c0       	rjmp	.+64     	; 0x3d4 <GetKeypadKey+0x8c>
 394:	31 9b       	sbis	0x06, 1	; 6
 396:	20 c0       	rjmp	.+64     	; 0x3d8 <GetKeypadKey+0x90>
 398:	32 9b       	sbis	0x06, 2	; 6
 39a:	20 c0       	rjmp	.+64     	; 0x3dc <GetKeypadKey+0x94>
 39c:	33 9b       	sbis	0x06, 3	; 6
 39e:	20 c0       	rjmp	.+64     	; 0x3e0 <GetKeypadKey+0x98>
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	08 95       	ret
 3a4:	81 e3       	ldi	r24, 0x31	; 49
 3a6:	08 95       	ret
 3a8:	84 e3       	ldi	r24, 0x34	; 52
 3aa:	08 95       	ret
 3ac:	87 e3       	ldi	r24, 0x37	; 55
 3ae:	08 95       	ret
 3b0:	8a e2       	ldi	r24, 0x2A	; 42
 3b2:	08 95       	ret
 3b4:	82 e3       	ldi	r24, 0x32	; 50
 3b6:	08 95       	ret
 3b8:	85 e3       	ldi	r24, 0x35	; 53
 3ba:	08 95       	ret
 3bc:	88 e3       	ldi	r24, 0x38	; 56
 3be:	08 95       	ret
 3c0:	80 e3       	ldi	r24, 0x30	; 48
 3c2:	08 95       	ret
 3c4:	83 e3       	ldi	r24, 0x33	; 51
 3c6:	08 95       	ret
 3c8:	86 e3       	ldi	r24, 0x36	; 54
 3ca:	08 95       	ret
 3cc:	89 e3       	ldi	r24, 0x39	; 57
 3ce:	08 95       	ret
 3d0:	83 e2       	ldi	r24, 0x23	; 35
 3d2:	08 95       	ret
 3d4:	81 e4       	ldi	r24, 0x41	; 65
 3d6:	08 95       	ret
 3d8:	82 e4       	ldi	r24, 0x42	; 66
 3da:	08 95       	ret
 3dc:	83 e4       	ldi	r24, 0x43	; 67
 3de:	08 95       	ret
 3e0:	84 e4       	ldi	r24, 0x44	; 68
 3e2:	08 95       	ret

000003e4 <SMTick1>:
 3e4:	b1 df       	rcall	.-158    	; 0x348 <GetKeypadKey>
 3e6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <x>
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	08 95       	ret

000003ee <main>:
}

// --------END User defined FSMs-----------------------------------------------
// Implement scheduler code from PES.
int main()
{
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	00 d0       	rcall	.+0      	; 0x3f4 <main+0x6>
 3f4:	00 d0       	rcall	.+0      	; 0x3f6 <main+0x8>
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0xFF; PORTA = 0x00;
 3fa:	8f ef       	ldi	r24, 0xFF	; 255
 3fc:	81 b9       	out	0x01, r24	; 1
 3fe:	12 b8       	out	0x02, r1	; 2
	DDRD = 0xFF; PORTD = 0x00; // PORTB set to output, outputs init 0s
 400:	8a b9       	out	0x0a, r24	; 10
 402:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 404:	80 ef       	ldi	r24, 0xF0	; 240
 406:	87 b9       	out	0x07, r24	; 7
 408:	8f e0       	ldi	r24, 0x0F	; 15
 40a:	88 b9       	out	0x08, r24	; 8
	LCD_init();
 40c:	a3 de       	rcall	.-698    	; 0x154 <LCD_init>
 40e:	0f 2e       	mov	r0, r31
 410:	f2 e3       	ldi	r31, 0x32	; 50
 412:	ef 2e       	mov	r14, r31
 414:	f0 2d       	mov	r31, r0
 416:	f1 2c       	mov	r15, r1
 418:	00 e0       	ldi	r16, 0x00	; 0
 41a:	10 e0       	ldi	r17, 0x00	; 0
 41c:	5a e0       	ldi	r21, 0x0A	; 10
 41e:	40 e0       	ldi	r20, 0x00	; 0
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	04 c0       	rjmp	.+8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	unsigned long int c;
	while (1){
		c = a%b;
		if (c==0){ return b;}
		a = b;
		b = c;
 426:	e6 2e       	mov	r14, r22
 428:	f7 2e       	mov	r15, r23
 42a:	08 2f       	mov	r16, r24
 42c:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD( unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while (1){
		c = a%b;
 42e:	65 2f       	mov	r22, r21
 430:	74 2f       	mov	r23, r20
 432:	83 2f       	mov	r24, r19
 434:	92 2f       	mov	r25, r18
 436:	2e 2d       	mov	r18, r14
 438:	3f 2d       	mov	r19, r15
 43a:	40 2f       	mov	r20, r16
 43c:	51 2f       	mov	r21, r17
 43e:	8f d0       	rcall	.+286    	; 0x55e <__udivmodsi4>
 440:	5e 2d       	mov	r21, r14
 442:	4f 2d       	mov	r20, r15
 444:	30 2f       	mov	r19, r16
 446:	21 2f       	mov	r18, r17
		if (c==0){ return b;}
 448:	61 15       	cp	r22, r1
 44a:	71 05       	cpc	r23, r1
 44c:	81 05       	cpc	r24, r1
 44e:	91 05       	cpc	r25, r1
 450:	51 f7       	brne	.-44     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	tmpGCD = findGCD(SMTick1_calc, SMTick2_calc);
	
	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;
	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
 452:	6a e0       	ldi	r22, 0x0A	; 10
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	2e 2d       	mov	r18, r14
 45c:	3f 2d       	mov	r19, r15
 45e:	40 2f       	mov	r20, r16
 460:	51 2f       	mov	r21, r17
 462:	7d d0       	rcall	.+250    	; 0x55e <__udivmodsi4>
 464:	49 01       	movw	r8, r18
 466:	5a 01       	movw	r10, r20
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
 468:	62 e3       	ldi	r22, 0x32	; 50
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	2e 2d       	mov	r18, r14
 472:	3f 2d       	mov	r19, r15
 474:	40 2f       	mov	r20, r16
 476:	51 2f       	mov	r21, r17
 478:	72 d0       	rcall	.+228    	; 0x55e <__udivmodsi4>
	//Declare an array of tasks
	static task task1, task2;
	task *tasks[] = {&task1, &task2};
 47a:	af e0       	ldi	r26, 0x0F	; 15
 47c:	b1 e0       	ldi	r27, 0x01	; 1
 47e:	ba 83       	std	Y+2, r27	; 0x02
 480:	a9 83       	std	Y+1, r26	; 0x01
 482:	e4 e0       	ldi	r30, 0x04	; 4
 484:	f1 e0       	ldi	r31, 0x01	; 1
 486:	fc 83       	std	Y+4, r31	; 0x04
 488:	eb 83       	std	Y+3, r30	; 0x03
	const unsigned short numTasks = sizeof (tasks)/ sizeof (task*);
	// Task 1
	task1.state = -1; //Task initial state.
 48a:	8f ef       	ldi	r24, 0xFF	; 255
 48c:	8c 93       	st	X, r24
	task1.period = SMTick1_period; //Task Period.
 48e:	11 96       	adiw	r26, 0x01	; 1
 490:	8d 92       	st	X+, r8
 492:	9d 92       	st	X+, r9
 494:	ad 92       	st	X+, r10
 496:	bc 92       	st	X, r11
 498:	14 97       	sbiw	r26, 0x04	; 4
	task1.elapsedTime = SMTick1_period; //Task current elapsed time.
 49a:	15 96       	adiw	r26, 0x05	; 5
 49c:	8d 92       	st	X+, r8
 49e:	9d 92       	st	X+, r9
 4a0:	ad 92       	st	X+, r10
 4a2:	bc 92       	st	X, r11
 4a4:	18 97       	sbiw	r26, 0x08	; 8
	task1.TickFct = &SMTick1; //Function pointer for the tick.
 4a6:	62 ef       	ldi	r22, 0xF2	; 242
 4a8:	71 e0       	ldi	r23, 0x01	; 1
 4aa:	1a 96       	adiw	r26, 0x0a	; 10
 4ac:	7c 93       	st	X, r23
 4ae:	6e 93       	st	-X, r22
 4b0:	19 97       	sbiw	r26, 0x09	; 9
	// Task 2
	task2.state = -1; //Task initial state.
 4b2:	80 83       	st	Z, r24
	task2.period = SMTick2_period; //Task Period.
 4b4:	21 83       	std	Z+1, r18	; 0x01
 4b6:	32 83       	std	Z+2, r19	; 0x02
 4b8:	43 83       	std	Z+3, r20	; 0x03
 4ba:	54 83       	std	Z+4, r21	; 0x04
	task2.elapsedTime = SMTick2_period; //Task current elapsed time.
 4bc:	25 83       	std	Z+5, r18	; 0x05
 4be:	36 83       	std	Z+6, r19	; 0x06
 4c0:	47 83       	std	Z+7, r20	; 0x07
 4c2:	50 87       	std	Z+8, r21	; 0x08
	task2.TickFct = &SMTick2; //Function pointer for the tick.
 4c4:	82 ec       	ldi	r24, 0xC2	; 194
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	92 87       	std	Z+10, r25	; 0x0a
 4ca:	81 87       	std	Z+9, r24	; 0x09
	
	// Set the timer and turn it on
	TimerSet(GCD);
 4cc:	6e 2d       	mov	r22, r14
 4ce:	7f 2d       	mov	r23, r15
 4d0:	80 2f       	mov	r24, r16
 4d2:	91 2f       	mov	r25, r17
	TimerOn();
 4d4:	28 df       	rcall	.-432    	; 0x326 <TimerSet>
 4d6:	c7 de       	rcall	.-626    	; 0x266 <TimerOn>
 4d8:	7e 01       	movw	r14, r28
 4da:	85 e0       	ldi	r24, 0x05	; 5
 4dc:	e8 0e       	add	r14, r24
 4de:	f1 1c       	adc	r15, r1
 4e0:	de 01       	movw	r26, r28
 4e2:	11 96       	adiw	r26, 0x01	; 1
 4e4:	6d 01       	movw	r12, r26
	
	while (1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 4e6:	f6 01       	movw	r30, r12
 4e8:	01 91       	ld	r16, Z+
 4ea:	11 91       	ld	r17, Z+
 4ec:	6f 01       	movw	r12, r30
 4ee:	d8 01       	movw	r26, r16
 4f0:	15 96       	adiw	r26, 0x05	; 5
 4f2:	4d 91       	ld	r20, X+
 4f4:	5d 91       	ld	r21, X+
 4f6:	6d 91       	ld	r22, X+
 4f8:	7c 91       	ld	r23, X
 4fa:	18 97       	sbiw	r26, 0x08	; 8
 4fc:	11 96       	adiw	r26, 0x01	; 1
 4fe:	8d 91       	ld	r24, X+
 500:	9d 91       	ld	r25, X+
 502:	0d 90       	ld	r0, X+
 504:	bc 91       	ld	r27, X
 506:	a0 2d       	mov	r26, r0
 508:	48 17       	cp	r20, r24
 50a:	59 07       	cpc	r21, r25
 50c:	6a 07       	cpc	r22, r26
 50e:	7b 07       	cpc	r23, r27
 510:	81 f4       	brne	.+32     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 512:	f8 01       	movw	r30, r16
 514:	80 81       	ld	r24, Z
 516:	01 84       	ldd	r0, Z+9	; 0x09
 518:	f2 85       	ldd	r31, Z+10	; 0x0a
 51a:	e0 2d       	mov	r30, r0
 51c:	08 2e       	mov	r0, r24
 51e:	00 0c       	add	r0, r0
 520:	99 0b       	sbc	r25, r25
 522:	09 95       	icall
 524:	d8 01       	movw	r26, r16
 526:	8c 93       	st	X, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 528:	f8 01       	movw	r30, r16
 52a:	15 82       	std	Z+5, r1	; 0x05
 52c:	16 82       	std	Z+6, r1	; 0x06
 52e:	17 82       	std	Z+7, r1	; 0x07
 530:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 532:	f8 01       	movw	r30, r16
 534:	85 81       	ldd	r24, Z+5	; 0x05
 536:	96 81       	ldd	r25, Z+6	; 0x06
 538:	a7 81       	ldd	r26, Z+7	; 0x07
 53a:	b0 85       	ldd	r27, Z+8	; 0x08
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	a1 1d       	adc	r26, r1
 540:	b1 1d       	adc	r27, r1
 542:	85 83       	std	Z+5, r24	; 0x05
 544:	96 83       	std	Z+6, r25	; 0x06
 546:	a7 83       	std	Z+7, r26	; 0x07
 548:	b0 87       	std	Z+8, r27	; 0x08
	
	
	
	while (1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 54a:	ce 14       	cp	r12, r14
 54c:	df 04       	cpc	r13, r15
 54e:	59 f6       	brne	.-106    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while (!TimerFlag);
 550:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <TimerFlag>
 554:	88 23       	and	r24, r24
 556:	e1 f3       	breq	.-8      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
		TimerFlag = 0;
 558:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <TimerFlag>
	}
 55c:	c1 cf       	rjmp	.-126    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>

0000055e <__udivmodsi4>:
 55e:	a1 e2       	ldi	r26, 0x21	; 33
 560:	1a 2e       	mov	r1, r26
 562:	aa 1b       	sub	r26, r26
 564:	bb 1b       	sub	r27, r27
 566:	fd 01       	movw	r30, r26
 568:	0d c0       	rjmp	.+26     	; 0x584 <__udivmodsi4_ep>

0000056a <__udivmodsi4_loop>:
 56a:	aa 1f       	adc	r26, r26
 56c:	bb 1f       	adc	r27, r27
 56e:	ee 1f       	adc	r30, r30
 570:	ff 1f       	adc	r31, r31
 572:	a2 17       	cp	r26, r18
 574:	b3 07       	cpc	r27, r19
 576:	e4 07       	cpc	r30, r20
 578:	f5 07       	cpc	r31, r21
 57a:	20 f0       	brcs	.+8      	; 0x584 <__udivmodsi4_ep>
 57c:	a2 1b       	sub	r26, r18
 57e:	b3 0b       	sbc	r27, r19
 580:	e4 0b       	sbc	r30, r20
 582:	f5 0b       	sbc	r31, r21

00000584 <__udivmodsi4_ep>:
 584:	66 1f       	adc	r22, r22
 586:	77 1f       	adc	r23, r23
 588:	88 1f       	adc	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	1a 94       	dec	r1
 58e:	69 f7       	brne	.-38     	; 0x56a <__udivmodsi4_loop>
 590:	60 95       	com	r22
 592:	70 95       	com	r23
 594:	80 95       	com	r24
 596:	90 95       	com	r25
 598:	9b 01       	movw	r18, r22
 59a:	ac 01       	movw	r20, r24
 59c:	bd 01       	movw	r22, r26
 59e:	cf 01       	movw	r24, r30
 5a0:	08 95       	ret

000005a2 <__tablejump2__>:
 5a2:	ee 0f       	add	r30, r30
 5a4:	ff 1f       	adc	r31, r31
 5a6:	00 24       	eor	r0, r0
 5a8:	00 1c       	adc	r0, r0
 5aa:	0b be       	out	0x3b, r0	; 59
 5ac:	07 90       	elpm	r0, Z+
 5ae:	f6 91       	elpm	r31, Z
 5b0:	e0 2d       	mov	r30, r0
 5b2:	09 94       	ijmp

000005b4 <_exit>:
 5b4:	f8 94       	cli

000005b6 <__stop_program>:
 5b6:	ff cf       	rjmp	.-2      	; 0x5b6 <__stop_program>
